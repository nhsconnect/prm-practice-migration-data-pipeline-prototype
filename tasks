#!/bin/bash

set -Eeo pipefail

###########################
# Local Config Parameters #
###########################

AWS_DEFAULT_REGION=eu-west-2
export NHS_SERVICE=pracmig
export NHS_ENVIRONMENT=ci

####################################
# Instance (Environment) Variables #
####################################

function check_env {
  if [[ -z "${NHS_ENVIRONMENT}" ]]; then
    echo "Must set NHS_ENVIRONMENT"
    exit 1
  fi
}

function check_nhs_service {
  if [[ -z "${NHS_SERVICE}" ]]; then
    echo "Must set NHS_SERVICE"
    exit 1
  fi
}

#######################
# Terraform Functions #
#######################

function tf_init {
  check_env
  check_nhs_service
  cd stacks/data-pipeline/terraform
  terraform init -reconfigure \
    -backend-config key="${NHS_SERVICE}-${NHS_ENVIRONMENT}/terraform.tfstate" \
    -backend-config bucket="prm-deductions-${bucket_env_infix}terraform-state" \
    -backend-config region=${AWS_DEFAULT_REGION}
}

function tf_plan {
   operation=$1
#   certs=$2
#  set_image_tag

  tf_init

#  terraform plan -out="pracmig-datasync.tfplan"
#  terraform get # modules
  if [[ "${operation}" == "create" ]]; then
      terraform plan -out="pracmig-datasync.tfplan"
  elif [[ "${operation}" == "destroy" ]]; then
      terraform plan -out="pracmig-datasync.tfplan" -destroy
  else
    echo "Unknown operation (should be create or destroy), got: ${operation}"
    exit 1
  fi
}

function tf_apply {
  tf_init
  terraform apply pracmig-datasync.tfplan
  terraform output -json > tf-out.json
}

for command in "$@"
do
  echo "--- ${command} ---"
  case "${command}" in
    dojo-validate)
        dojo "./tasks devenv validate"
      ;;
    tf_plan)
      dojo "./tasks _tf_plan $2"
      ;;
    _tf_plan)
      tf_plan "$2"
      ;;
    tf_apply)
      dojo "./tasks _tf_apply"
      ;;
    _tf_apply)
      tf_apply
      ;;
  esac
done

set +e