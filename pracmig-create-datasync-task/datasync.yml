AWSTemplateFormatVersion: "2010-09-09"
Description: Create a DataSync Task
Parameters:
  ActivationKey:
    Description: "The activation key of the activated DataSync agent (http://<AGENT_IPV4>/?activationRegion=eu-west-2)"
    Type: String
  SourceNfsServer:
    Description: "The hostname or IP address of the source NFS server"
    Type: String
  SourceNfsPath:
    Description: "The path to copy data from on the source NFS server"
    Type: String
    Default: "/"
  TargetS3BucketArn:
    Description: "The ARN of the S3 Bucket to use for the target location"
    Type: String
  OdsCode:
    Description: "The ODS Code of the practice being migrated"
    Type: String
  # LogGroupArn:
  #   Description: "The ARN of the CloudWatch log group that DataSync will log to"
  #   Type: String

# Potentially to get DataSync activate key
#Type: AWS::CloudFormation::CustomResource
#Properties:
#  RequestType: Create

Resources:
  # SourceEC2Agent:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     ImageId: "ami-02f47b11d24f08157"
  #     InstanceType: m5.large
  #     SecurityGroupIds:
  #       - sg-0f4d3af45b935bdad #TODO: Creation of this SG should be templated
  #       - !GetAtt AllowActivationKeyFetchingLambdaToConnectToSourceAgent.GroupId
  #     SubnetId: !Ref SourceAgentActivationKeyFetcherSubnet
  # AllowActivationKeyFetchingLambdaToConnectToSourceAgent:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: "Allow the activation key-fetching lambda to be able to fetch the key from the source agent"
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: 80
  #         ToPort: 80
  #         CidrIp: !GetAtt SourceAgentActivationKeyFetcherSubnet.CidrIp

  # SourceAgentActivationKeyFetcher:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Code:
  #       ZipFile: |
  #         import cfnresponse
  #         import os
  #         from urllib.parse import urlparse, parse_qs
  #         from botocore.vendored import requests
  #         import logging
  #         logger = logging.getLogger(__name__)
  #         logger.setLevel(logging.INFO)

  #         def handler(event, context):
  #             try:
  #                 AGENT_IP = os.environ['AGENT_IP']
  #                 key = {}
  #                 if event["RequestType"] in ["Create", "Update"]:
  #                     logger.info(f'Requesting Activation Key: http://{AGENT_IP}/?activationRegion=eu-west-2')
  #                     res = requests.get(f'http://{AGENT_IP}/?activationRegion=eu-west-2', timeout=2)
  #                     res.raise_for_status()
  #                     key = parse_qs(urlparse(res.history[1].url).query)['activationKey'][0]
  #                 elif event["RequestType"] == "Delete":
  #                     pass
  #                 cfnresponse.send(event, context, cfnresponse.SUCCESS, key)
  #             except requests.exceptions.RequestException as e:
  #                 logger.error(f"Unable to activate agent", exc_info=1)
  #                 cfnresponse.send(event, context, cfnresponse.FAILED, key)
  #     Handler: index.handler
  #     Role: !GetAtt SourceAgentActivationKeyFetcherRole.Arn
  #     Runtime: python3.6 # version of python that still have vendored requests lib
  #     Environment:
  #       Variables:
  #         AGENT_IP: !GetAtt SourceEC2Agent.PublicIp
  #     VpcConfig:
  #       SecurityGroupIds:
  #         - !GetAtt SourceAgentActivationKeyFetcherSecurityGroup.GroupId
  #       SubnetIds:
  #         - !Ref SourceAgentActivationKeyFetcherSubnet
  # SourceAgentActivationKeyFetcherSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: "A security group for the activation key-fetching lambda"
  #     VpcId: !Ref SourceAgentActivationKeyFetcherVpc
  # SourceAgentActivationKeyFetcherRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Action:
  #             - sts:AssumeRole
  #           Effect: Allow
  #           Principal:
  #             Service:
  #               - lambda.amazonaws.com
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  #       - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
  # SourceAgentActivationKeyFetcherVpc:
  #   Type: AWS::EC2::VPC
  #   Properties:
  #     CidrBlock: 10.0.0.0/28
  #     EnableDnsSupport: False
  # SourceAgentActivationKeyFetcherSubnet:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     CidrBlock: !GetAtt SourceAgentActivationKeyFetcherVpc.CidrBlock
  #     VpcId: !Ref SourceAgentActivationKeyFetcherVpc
  # DataSyncActivationKey:
  #   Type: Custom::DataSyncActivationKey
  #   Properties:
  #     ServiceToken: !GetAtt SourceAgentActivationKeyFetcher.Arn
  #     RequestType: Create
  #     ResourceType: Custom::DataSyncActivationKey

  SourceNfsAgent:
    Type: AWS::DataSync::Agent
    Properties:
      ActivationKey: !Ref DataSyncActivationKey
      AgentName:
        !Join [
          "-",
          [
            "Agent",
            !Ref OdsCode,
            !Select [
              4,
              !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId]]],
            ],
          ],
        ]
  SourceNfsLocation:
    Type: AWS::DataSync::LocationNFS
    Properties:
      OnPremConfig:
        AgentArns:
          - !Ref SourceNfsAgent
      ServerHostname: !Ref SourceNfsServer
      Subdirectory: !Ref SourceNfsPath

  TargetS3BucketAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - datasync.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Description: "Role to allow DataSync to access an S3 bucket for a practice migration"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      MaxSessionDuration: 3600
      RoleName:
        !Join [
          "-",
          [
            "AllowDataSyncAccessToS3",
            !Join [
              "-",
              [
                !Ref OdsCode,
                !Select [
                  4,
                  !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId]]],
                ],
              ],
            ],
          ],
        ]
  TargetLocation:
    Type: AWS::DataSync::LocationS3
    Properties:
      S3BucketArn: !Ref TargetS3BucketArn
      S3Config:
        BucketAccessRoleArn: !GetAtt TargetS3BucketAccessRole.Arn
      S3StorageClass: STANDARD
      Subdirectory:
        !Join [
          "-",
          [
            !Ref OdsCode,
            !Select [
              4,
              !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId]]],
            ],
          ],
        ]

  DataSyncTask:
    Type: AWS::DataSync::Task
    Properties:
      #    CloudWatchLogGroupArn: String
      DestinationLocationArn: !GetAtt TargetLocation.LocationArn
      Name:
        !Join [
          "-",
          [
            !Ref OdsCode,
            !Select [
              4,
              !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId]]],
            ],
          ],
        ]
      SourceLocationArn: !GetAtt SourceNfsLocation.LocationArn
