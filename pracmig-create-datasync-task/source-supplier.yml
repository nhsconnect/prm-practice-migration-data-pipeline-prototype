AWSTemplateFormatVersion: "2010-09-09"
Description: Create a Source Supplier DataSync Agent
Parameters:
  CidrBlockAllowedAccessToBastion:
    Description: "A CIDR block that will be allowed access to the bastion host"
    Type: String
  BastionKeyName:
    Description: "The name of a key pair to enable SSH access to the bastion host"
    Type: String

Resources:
  DataSyncEC2Agent:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-02f47b11d24f08157"
      InstanceType: m5.large
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !GetAtt DataSyncEC2AgentSecurityGroup.GroupId
  BastionEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-0c0a1cc13a52a158f"
      InstanceType: t2.micro
      KeyName: !Ref BastionKeyName
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !GetAtt BastionEC2SecurityGroup.GroupId
  NFSServerEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-0fc15d50d39e4503c"
      InstanceType: t2.micro
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !GetAtt NFSServerEC2SecurityGroup.GroupId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          mkdir /nfs-share/
          systemctl enable rpcbind
          systemctl enable nfs-server
          systemctl enable nfs-lock
          systemctl enable nfs-idmap
          systemctl start rpcbind
          systemctl start nfs-server
          systemctl start nfs-lock
          systemctl start nfs-idmap
          /etc/exports < "/nfs-share 0.0.0.0(rw,sync,no_root_squash,no_all_squash)"
          systemctl restart nfs-server
          exportfs
  DataSyncEC2AgentSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow the activation key-fetching lambda to be able to fetch the key from the source agent"
      VpcId: !Ref ActivationKeyFetcherVpc
      SecurityGroupIngress:
        - Description: Allow ActivationKeyFetcher to retrieve ActivationKey
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.0.1.0/24
  BastionEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow access from restricted external clients"
      VpcId: !Ref ActivationKeyFetcherVpc
      SecurityGroupIngress:
        - Description: Allow external SSH access to Bastion
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref CidrBlockAllowedAccessToBastion
  NFSServerEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow NFS client connections"
      VpcId: !Ref ActivationKeyFetcherVpc
      SecurityGroupIngress:
        - Description: Allow NFS client connections
          IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 10.0.1.0/24

  ActivationKeyFetcher:
    Type: AWS::Lambda::Function
    Properties:
      Code: "./_build"
      Handler: handler.handler
      Role: !GetAtt ActivationKeyFetcherRole.Arn
      Runtime: python3.9
      Timeout: 60
      Environment:
        Variables:
          AGENT_IP: !GetAtt DataSyncEC2Agent.PrivateIp
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt ActivationKeyFetcherVpc.DefaultSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet
  ActivationKeyFetcherRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  ## VPC
  ActivationKeyFetcherVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: True
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref ActivationKeyFetcherVpc
  PublicSubnetEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref BastionEC2
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref ActivationKeyFetcherVpc
  PrivateSubnetEIP:
    Type: AWS::EC2::EIP
  PrivateSubnetNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt PrivateSubnetEIP.AllocationId
      ConnectivityType: public
      SubnetId: !Ref PublicSubnet

  ## VPC INTERNET GATEWAY
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref ActivationKeyFetcherVpc

  ## PUBLIC SUBNET ROUTING
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ActivationKeyFetcherVpc
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet
  ## PRIVATE SUBNET ROUTING
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ActivationKeyFetcherVpc
  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PrivateSubnetNatGateway
      RouteTableId: !Ref PrivateRouteTable
  PrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet

  DataSyncActivationKey:
    Type: Custom::DataSyncActivationKey
    Properties:
      ServiceToken: !GetAtt ActivationKeyFetcher.Arn
      RequestType: Create
      ResourceType: Custom::DataSyncActivationKey

Outputs:
  DataSyncActivationKey:
    Description: DataSync agent activation key
    Value: !GetAtt DataSyncActivationKey.ActivationKey
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", DataSyncActivationKey]]
