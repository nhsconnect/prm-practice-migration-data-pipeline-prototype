AWSTemplateFormatVersion: "2010-09-09"
Description: Create a Source Supplier DataSync Agent
Parameters:
  SourceSupplierVpcId:
    Description: "The ID of the VPC into which created instances will be placed"
    Type: String
  SubnetId:
    Description: "The ID of a subnet into which created instances will be placed; must be a subnet in the VPC referenced by SourceSupplierVpcId"
    Type: String
  SshKeyName:
    Description: "The name of a key pair to enable SSH access to instances"
    Type: String

Resources:
  DataSyncEC2Agent:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-0b96e7f3d3feaca81"
      InstanceType: m5.2xlarge
      KeyName: !Ref SshKeyName
      SubnetId: !Ref SubnetId
      SecurityGroupIds:
        - !GetAtt DataSyncEC2AgentSecurityGroup.GroupId
  NfsServerEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-0fc15d50d39e4503c"
      InstanceType: t2.micro
      KeyName: !Ref SshKeyName
      SubnetId: !Ref SubnetId
      SecurityGroupIds:
        - !GetAtt NfsServerEC2SecurityGroup.GroupId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          mkdir /nfs-share
          chown ec2-user:ec2-user /nfs-share
          chmod 777 /nfs-share
          systemctl enable rpcbind
          systemctl enable nfs-server
          systemctl enable nfs-lock
          systemctl enable nfs-idmap
          systemctl start rpcbind
          systemctl start nfs-server
          systemctl start nfs-lock
          systemctl start nfs-idmap
          echo "/nfs-share *(rw,insecure,sync,no_root_squash,no_all_squash)" >> /etc/exports
          systemctl restart nfs-server
          exportfs
  DataSyncEC2AgentSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow the activation key-fetching lambda to be able to fetch the key from the source agent"
      VpcId: !Ref SourceSupplierVpcId
      SecurityGroupIngress:
        - Description: Allow SSH connections from public subnet
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/24 # Assumed to be the public subnet IP range
        - Description: Allow ActivationKeyFetcher to retrieve ActivationKey
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.0.1.0/24 # Assumed to be the private subnet IP range
  NfsServerEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow NFS client connections"
      VpcId: !Ref SourceSupplierVpcId
      SecurityGroupIngress:
        - Description: Allow SSH connections from public subnet
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/24 # Assumed to be the public subnet IP range
        - Description: Allow NFS client connections from public subnet
          IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 10.0.0.0/24 # Assumed to be the public subnet IP range
        - Description: Allow NFS client connections from private subnet
          IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 10.0.1.0/24 # Assumed to be the private subnet IP range
        - Description: Allow portmapper connections from private subnet
          IpProtocol: tcp
          FromPort: 111
          ToPort: 111
          CidrIp: 10.0.1.0/24 # Assumed to be the private subnet IP range
        - Description: Allow mountd connections from private subnet
          IpProtocol: tcp
          FromPort: 20048
          ToPort: 20048
          CidrIp: 10.0.1.0/24 # Assumed to be the private subnet IP range

  ActivationKeyFetcher:
    Type: AWS::Lambda::Function
    Properties:
      Code: "../../_build/agent_activator"
      Handler: agent_activator.agent_activator.handler
      Role: !GetAtt ActivationKeyFetcherRole.Arn
      Runtime: python3.9
      Timeout: 300
      Environment:
        Variables:
          AGENT_IP: !GetAtt DataSyncEC2Agent.PrivateIp
      VpcConfig:
        SecurityGroupIds:
          - !Ref ActivationKeyFetcherSecurityGroup
        SubnetIds:
          - !Ref SubnetId
  ActivationKeyFetcherRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
  ActivationKeyFetcherSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for the activation key fetcher lambda"
      VpcId: !Ref SourceSupplierVpcId

  DataSyncActivationKey:
    Type: Custom::DataSyncActivationKey
    Properties:
      ServiceToken: !GetAtt ActivationKeyFetcher.Arn
      RequestType: Create
      ResourceType: Custom::DataSyncActivationKey

Outputs:
  DataSyncActivationKey:
    Description: DataSync agent activation key
    Value: !GetAtt DataSyncActivationKey.ActivationKey
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "DataSyncActivationKey"]]
  NfsServerPrivateIp:
    Description: The private IP address of the NFS server
    Value: !GetAtt NfsServerEC2.PrivateIp
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", "NfsServerPrivateIp"]]
